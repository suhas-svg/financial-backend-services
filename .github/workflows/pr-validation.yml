name: Pull Request Validation

on:
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened]

env:
  JAVA_VERSION: '22'
  MAVEN_OPTS: '-Xmx1024m'

jobs:
  # PR validation - runs tests and security scans without deployment
  pr-validation:
    name: PR Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: maven

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Compile and test
        run: |
          ./mvnw clean compile
          ./mvnw test
        working-directory: account-service

      - name: Generate test coverage
        run: ./mvnw jacoco:report
        working-directory: account-service

      - name: Comment PR with test results
        uses: actions/github-script@v7
        if: always()
        with:
          script: |
            const fs = require('fs');
            const path = 'account-service/target/site/jacoco/index.html';
            
            let coverage = 'Coverage report not found';
            if (fs.existsSync(path)) {
              coverage = 'Test coverage report generated successfully';
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## PR Validation Results\n\nâœ… Tests completed\nðŸ“Š ${coverage}\n\nPipeline run: ${context.runId}`
            });

  # Security scan for PR
  pr-security-scan:
    name: PR Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: 'fs'
          scan-ref: 'account-service'
          format: 'table'

      - name: OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@1.1.0
        with:
          project: 'account-service'
          path: 'account-service'
          format: 'JSON'

  # Code quality check
  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: maven

      - name: Run code quality analysis
        run: |
          echo "Code quality analysis would run here"
          # SonarCloud integration will be added in later tasks
        working-directory: account-service