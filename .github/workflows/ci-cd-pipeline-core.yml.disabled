name: CI/CD Pipeline (Core)

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  release:
    types: [published]

env:
  JAVA_VERSION: '22'
  MAVEN_OPTS: '-Xmx1024m'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Unit Testing with parallel execution
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-group: [service, controller, security, repository]
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: maven

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run unit tests by group
        run: |
          cd account-service
          case "${{ matrix.test-group }}" in
            service)
              ./mvnw test -Dtest="**/*Service*Test" -Dmaven.test.failure.ignore=false
              ;;
            controller)
              ./mvnw test -Dtest="**/*Controller*Test" -Dmaven.test.failure.ignore=false
              ;;
            security)
              ./mvnw test -Dtest="**/*Security*Test,**/*Jwt*Test" -Dmaven.test.failure.ignore=false
              ;;
            repository)
              ./mvnw test -Dtest="**/*Repository*Test" -Dmaven.test.failure.ignore=false
              ;;
          esac

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-results-${{ matrix.test-group }}
          path: |
            account-service/target/surefire-reports/
            account-service/target/site/jacoco/

  # Code Quality and Security Gates
  validate:
    name: Code Validation
    runs-on: ubuntu-latest
    needs: unit-tests
    permissions:
      security-events: write
      actions: read
      contents: read
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: maven

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      # Initialize CodeQL for security vulnerability detection
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: java
          queries: security-extended,security-and-quality

      - name: Compile code
        run: ./mvnw clean compile
        working-directory: account-service

      # Run unit tests with coverage
      - name: Run unit tests with coverage
        run: |
          ./mvnw test jacoco:report \
            -Dmaven.test.failure.ignore=false \
            -Dparallel=methods \
            -DthreadCount=4
        working-directory: account-service

      # Perform CodeQL Analysis
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:java"

      # Check code coverage thresholds
      - name: Check code coverage thresholds
        run: |
          cd account-service
          ./mvnw jacoco:check
          
          # Extract coverage percentage
          COVERAGE=$(grep -oP 'Total.*?(\d+)%' target/site/jacoco/index.html | grep -oP '\d+' | tail -1 || echo "0")
          echo "Code coverage: ${COVERAGE}%"
          
          # Set minimum coverage threshold
          MIN_COVERAGE=70
          if [ "$COVERAGE" -lt "$MIN_COVERAGE" ]; then
            echo "::warning::Code coverage ($COVERAGE%) is below recommended threshold ($MIN_COVERAGE%)"
          fi
          
          echo "COVERAGE_PERCENTAGE=$COVERAGE" >> $GITHUB_ENV

      # SonarCloud analysis (optional - only if token is available)
      - name: SonarCloud Scan
        if: env.SONAR_TOKEN != ''
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          cd account-service
          ./mvnw sonar:sonar \
            -Dsonar.projectKey=${{ github.repository_owner }}_${{ github.event.repository.name }} \
            -Dsonar.organization=${{ github.repository_owner }} \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml \
            -Dsonar.java.source=22 \
            -Dsonar.java.target=22

      # Upload coverage reports
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: env.CODECOV_TOKEN != ''
        with:
          file: account-service/target/site/jacoco/jacoco.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      # Generate and upload test reports
      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: |
            account-service/target/surefire-reports/*.xml

      # Upload JaCoCo coverage report as artifact
      - name: Upload JaCoCo coverage report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: jacoco-coverage-report
          path: |
            account-service/target/site/jacoco/
            account-service/target/surefire-reports/

  # Basic Security scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: validate
    permissions:
      security-events: write
      actions: read
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: maven

      # Trivy filesystem vulnerability scanner
      - name: Run Trivy filesystem scanner
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: 'fs'
          scan-ref: 'account-service'
          format: 'sarif'
          output: 'trivy-fs-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'

      - name: Upload Trivy filesystem scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-fs-results.sarif'
          category: 'trivy-filesystem'

      # OWASP Dependency Check for Java dependencies
      - name: OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@1.1.0
        with:
          project: 'account-service'
          path: 'account-service'
          format: 'ALL'
          args: >
            --enableRetired
            --failOnCVSS 8

      - name: Upload OWASP Dependency Check results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dependency-check-report
          path: reports/

  # Build and package
  build:
    name: Build and Package
    runs-on: ubuntu-latest
    needs: [validate, security-scan]
    if: github.event_name != 'pull_request'
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Generate semantic version
      - name: Generate version
        id: version
        run: |
          # Get the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          
          # Extract version numbers
          VERSION=${LATEST_TAG#v}
          MAJOR=$(echo $VERSION | cut -d. -f1)
          MINOR=$(echo $VERSION | cut -d. -f2)
          PATCH=$(echo $VERSION | cut -d. -f3)
          
          # Increment version based on branch
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            PATCH=$((PATCH + 1))
            NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
          else
            # For non-main branches, use branch name and commit SHA
            BRANCH_NAME=$(echo ${{ github.ref_name }} | sed 's/[^a-zA-Z0-9]/-/g')
            SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-8)
            NEW_VERSION="${VERSION}-${BRANCH_NAME}-${SHORT_SHA}"
          fi
          
          echo "version=${NEW_VERSION}" >> $GITHUB_OUTPUT
          echo "Generated version: ${NEW_VERSION}"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata for Docker images
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=semver,pattern={{version}},value=v${{ steps.version.outputs.version }}
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.title=Account Service
            org.opencontainers.image.description=Financial Account Service Microservice
            org.opencontainers.image.version=${{ steps.version.outputs.version }}

      # Build Docker image
      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: account-service
          file: account-service/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            APP_VERSION=${{ steps.version.outputs.version }}
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VCS_REF=${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Container security scanning
      - name: Run Trivy container image scanner
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{ fromJSON(steps.meta.outputs.json).tags[0] }}
          format: 'sarif'
          output: 'trivy-image-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'

      - name: Upload Trivy image scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-image-results.sarif'
          category: 'trivy-container'

  # Integration Testing with TestContainers
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: maven

      - name: Run integration tests
        run: |
          cd account-service
          ./mvnw test -Dtest="**/*IntegrationTest" \
            -Dspring.datasource.url=jdbc:postgresql://localhost:5432/testdb \
            -Dspring.datasource.username=postgres \
            -Dspring.datasource.password=postgres
        env:
          SPRING_PROFILES_ACTIVE: test

      - name: Upload integration test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results
          path: account-service/target/failsafe-reports/

  # Performance Testing with K6
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup K6
        uses: grafana/setup-k6-action@v1

      - name: Start test environment
        run: |
          cd account-service
          docker-compose -f docker-compose.test.yml up -d
          sleep 30  # Wait for services to be ready

      - name: Run K6 performance tests
        run: |
          cd account-service/k6-tests
          k6 run --out json=results.json performance-test.js

      - name: Stop test environment
        if: always()
        run: |
          cd account-service
          docker-compose -f docker-compose.test.yml down

      - name: Upload performance test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-test-results
          path: account-service/k6-tests/results.json

  # Deploy to Development Environment
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [build, integration-tests]
    if: github.ref == 'refs/heads/develop'
    environment:
      name: development
      url: https://dev.account-service.example.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3

      - name: Deploy to development
        run: |
          echo "Deploying to development environment..."
          # Placeholder for actual deployment commands
          # kubectl apply -f k8s/dev/
          echo "Development deployment completed"

      - name: Run smoke tests
        run: |
          echo "Running smoke tests..."
          # Placeholder for smoke tests
          echo "Smoke tests passed"

  # Deploy to Staging Environment
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, integration-tests, performance-tests]
    if: github.ref == 'refs/heads/main'
    environment:
      name: staging
      url: https://staging.account-service.example.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Placeholder for actual deployment commands
          # kubectl apply -f k8s/staging/
          echo "Staging deployment completed"

      - name: Run comprehensive tests
        run: |
          echo "Running comprehensive tests..."
          # Placeholder for comprehensive tests
          echo "Comprehensive tests passed"

  # Deploy to Production Environment (Manual Approval Required)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.event_name == 'release'
    environment:
      name: production
      url: https://account-service.example.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3

      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Placeholder for actual deployment commands
          # kubectl apply -f k8s/prod/
          echo "Production deployment completed"

      - name: Post-deployment health check
        run: |
          echo "Running post-deployment health checks..."
          # Placeholder for health checks
          echo "Health checks passed"

      - name: Create deployment marker
        run: |
          echo "Creating deployment marker for monitoring..."
          # Placeholder for deployment tracking
          echo "Deployment marker created"