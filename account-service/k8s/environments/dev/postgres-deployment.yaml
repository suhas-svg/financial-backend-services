apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-deployment
  namespace: finance-services-dev
  labels:
    app: postgres
    tier: database
    environment: development
spec:
  replicas: 1
  strategy:
    type: Recreate  # Use Recreate for database to avoid data corruption
  selector:
    matchLabels:
      app: postgres
      environment: development
  template:
    metadata:
      labels:
        app: postgres
        tier: database
        environment: development
    spec:
      securityContext:
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
      containers:
      - name: postgres
        image: postgres:15-alpine
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 5432
          name: postgres
        envFrom:
        - configMapRef:
            name: postgres-config
        - secretRef:
            name: postgres-secrets
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
            ephemeral-storage: "1Gi"
          limits:
            memory: "256Mi"
            cpu: "200m"
            ephemeral-storage: "2Gi"
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - postgres
            - -d
            - myfirstdb
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - postgres
            - -d
            - myfirstdb
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        securityContext:
          runAsNonRoot: true
          runAsUser: 999
          runAsGroup: 999
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        - name: postgres-init
          mountPath: /docker-entrypoint-initdb.d
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc
      - name: postgres-init
        configMap:
          name: postgres-init-scripts
          defaultMode: 0755
      restartPolicy: Always
      terminationGracePeriodSeconds: 60

---
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: finance-services-dev
  labels:
    app: postgres
    environment: development
spec:
  selector:
    app: postgres
    environment: development
  ports:
  - name: postgres
    port: 5432
    targetPort: 5432
    protocol: TCP
  type: ClusterIP

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: finance-services-dev
  labels:
    app: postgres
    environment: development
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  storageClassName: standard

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-init-scripts
  namespace: finance-services-dev
  labels:
    app: postgres
    environment: development
data:
  01-init-db.sql: |
    -- Create development database if it doesn't exist
    SELECT 'CREATE DATABASE myfirstdb'
    WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = 'myfirstdb')\gexec
    
    -- Create development user with limited privileges
    DO $$
    BEGIN
        IF NOT EXISTS (SELECT FROM pg_catalog.pg_user WHERE usename = 'dev_user') THEN
            CREATE USER dev_user WITH PASSWORD 'dev_password';
        END IF;
    END
    $$;
    
    -- Grant necessary permissions
    GRANT CONNECT ON DATABASE myfirstdb TO dev_user;
    GRANT USAGE ON SCHEMA public TO dev_user;
    GRANT CREATE ON SCHEMA public TO dev_user;
    
  02-create-tables.sql: |
    -- Connect to the application database
    \c myfirstdb;
    
    -- Create development-specific tables or configurations
    CREATE TABLE IF NOT EXISTS dev_config (
        id SERIAL PRIMARY KEY,
        config_key VARCHAR(255) NOT NULL UNIQUE,
        config_value TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );
    
    -- Insert development configuration
    INSERT INTO dev_config (config_key, config_value) 
    VALUES ('environment', 'development') 
    ON CONFLICT (config_key) DO UPDATE SET 
        config_value = EXCLUDED.config_value,
        updated_at = CURRENT_TIMESTAMP;