input {
  file {
    path => "/usr/share/logstash/logs/transaction-service.log"
    start_position => "beginning"
    codec => "json"
    tags => ["transaction-service", "application"]
  }
  
  file {
    path => "/usr/share/logstash/logs/transaction-audit.log"
    start_position => "beginning"
    codec => "json"
    tags => ["transaction-service", "audit"]
  }
}

filter {
  # Parse timestamp
  date {
    match => [ "timestamp", "ISO8601" ]
    target => "@timestamp"
  }
  
  # Add service metadata
  mutate {
    add_field => {
      "service" => "transaction-service"
      "environment" => "production"
      "team" => "platform"
      "component" => "transaction-processing"
    }
  }
  
  # Parse log level
  if [level] {
    mutate {
      lowercase => [ "level" ]
    }
  }
  
  # Extract transaction details from audit logs
  if "audit" in [tags] {
    if [message] =~ /Transaction processed/ {
      grok {
        match => { 
          "message" => "Transaction processed: type=%{WORD:transaction_type}, id=%{UUID:transaction_id}, amount=%{NUMBER:amount:float}, status=%{WORD:status}" 
        }
      }
    }
    
    if [message] =~ /Transaction failed/ {
      grok {
        match => { 
          "message" => "Transaction failed: type=%{WORD:transaction_type}, id=%{UUID:transaction_id}, error=%{GREEDYDATA:error_message}" 
        }
      }
    }
  }
  
  # Extract performance metrics from application logs
  if "application" in [tags] {
    if [message] =~ /processing time/ {
      grok {
        match => { 
          "message" => ".*processing time: %{NUMBER:processing_time:int}ms.*" 
        }
      }
    }
    
    if [message] =~ /Account Service call/ {
      grok {
        match => { 
          "message" => "Account Service call.*duration: %{NUMBER:account_service_duration:int}ms.*" 
        }
      }
    }
  }
  
  # Parse correlation IDs
  if [correlationId] {
    mutate {
      add_field => { "correlation_id" => "%{correlationId}" }
    }
  }
  
  if [traceId] {
    mutate {
      add_field => { "trace_id" => "%{traceId}" }
    }
  }
  
  if [spanId] {
    mutate {
      add_field => { "span_id" => "%{spanId}" }
    }
  }
  
  # Parse user context
  if [userId] {
    mutate {
      add_field => { "user_id" => "%{userId}" }
    }
  }
  
  # Add business context
  if [transactionType] {
    mutate {
      add_field => { "business_operation" => "%{transactionType}" }
    }
  }
  
  # Classify log entries
  if [level] == "error" {
    mutate {
      add_field => { "log_category" => "error" }
      add_field => { "alert_level" => "high" }
    }
  } else if [level] == "warn" {
    mutate {
      add_field => { "log_category" => "warning" }
      add_field => { "alert_level" => "medium" }
    }
  } else if "audit" in [tags] {
    mutate {
      add_field => { "log_category" => "audit" }
      add_field => { "alert_level" => "info" }
    }
  } else {
    mutate {
      add_field => { "log_category" => "info" }
      add_field => { "alert_level" => "low" }
    }
  }
  
  # Remove unnecessary fields
  mutate {
    remove_field => [ "host", "path", "@version" ]
  }
}

output {
  # Send to Elasticsearch
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "transaction-service-logs-%{+YYYY.MM.dd}"
    template_name => "transaction-service"
    template => "/usr/share/logstash/templates/transaction-service-template.json"
    template_overwrite => true
  }
  
  # Debug output (remove in production)
  stdout {
    codec => rubydebug
  }
  
  # Send critical errors to alerting system
  if [level] == "error" and [log_category] == "error" {
    http {
      url => "http://alertmanager:9093/api/v1/alerts"
      http_method => "post"
      format => "json"
      mapping => {
        "alerts" => [
          {
            "labels" => {
              "alertname" => "LogError"
              "service" => "%{service}"
              "severity" => "warning"
              "instance" => "%{host}"
              "log_level" => "%{level}"
            }
            "annotations" => {
              "summary" => "Error log detected in Transaction Service"
              "description" => "%{message}"
            }
            "startsAt" => "%{@timestamp}"
          }
        ]
      }
    }
  }
}