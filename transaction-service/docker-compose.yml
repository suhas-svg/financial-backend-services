version: '3.8'

services:
  postgres-transactions:
    image: postgres:15-alpine
    container_name: transaction-service-postgres-${ENVIRONMENT:-dev}
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-transactiondb}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
    ports:
      - "${POSTGRES_PORT:-5433}:5432"
    volumes:
      - postgres_transactions_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-transactiondb}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - transaction-service-network

  redis:
    image: redis:7-alpine
    container_name: transaction-service-redis-${ENVIRONMENT:-dev}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis-password}
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped
    networks:
      - transaction-service-network

  transaction-app:
    build:
      context: .
      dockerfile: ${DOCKERFILE:-Dockerfile}
      args:
        BUILD_ENV: ${ENVIRONMENT:-dev}
        APP_VERSION: ${VERSION:-latest}
        BUILD_DATE: ${BUILD_DATE}
        VCS_REF: ${VCS_REF}
    image: ${REGISTRY:-ghcr.io}/${IMAGE_NAME:-transaction-service}:${VERSION:-latest}
    container_name: transaction-service-app-${ENVIRONMENT:-dev}
    ports:
      - "${APP_PORT:-8081}:8081"
      - "${METRICS_PORT:-9002}:9002"
      - "${DEBUG_PORT:-5006}:5005"  # Debug port for development
    environment:
      SPRING_PROFILES_ACTIVE: ${ENVIRONMENT:-dev}
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-transactions:5432/${POSTGRES_DB:-transactiondb}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER:-postgres}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
      SPRING_DATA_REDIS_PASSWORD: ${REDIS_PASSWORD:-redis-password}
      ACCOUNT_SERVICE_URL: ${ACCOUNT_SERVICE_URL:-http://host.docker.internal:8080}
      JAVA_OPTS: ${JAVA_OPTS:--XX:+UseContainerSupport -XX:MaxRAMPercentage=75.0}
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: health,info,metrics,prometheus
      LOGGING_LEVEL_ROOT: ${LOG_LEVEL:-INFO}
      JWT_SECRET: ${JWT_SECRET:-AY8Ro0HSBFyllm9ZPafT2GWuE/t8Yzq1P0Rf7bNeq14=}
    depends_on:
      postgres-transactions:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9002/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - transaction-service-network
    volumes:
      - transaction_app_logs:/app/logs

volumes:
  postgres_transactions_data:
    name: transaction-service-postgres-data-${ENVIRONMENT:-dev}
  redis_data:
    name: transaction-service-redis-data-${ENVIRONMENT:-dev}
  transaction_app_logs:
    name: transaction-service-app-logs-${ENVIRONMENT:-dev}

networks:
  transaction-service-network:
    name: transaction-service-network-${ENVIRONMENT:-dev}
    driver: bridge